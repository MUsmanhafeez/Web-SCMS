"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input AddOrganizationReqDto {
  desc: String
  iName: String
  location: String!
  name: String!
  phone: String!
  totalAmount: Float
  type: OrganizationPostType!
}

type AuthResponseDto {
  returnTo: String!
  success: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteUserResponseDto {
  message: String!
  userEmail: String!
}

type LoginResponseDto {
  auth: AuthResponseDto!
  user: UserDto!
}

input ModifyOrganizationReqDto {
  desc: String
  iName: String
  name: String!
  orgId: Uuid!
  phone: String!
  totalAmount: Float
  type: OrganizationPostType!
}

type Mutation {
  addOrganization(addOrganizationReqDto: AddOrganizationReqDto!): OrganizationDto!
  addTotalAmount(orgId: Uuid!, totalAmount: Float!): OrganizationDto!
  deleteTestUser(email: String!): DeleteUserResponseDto!
  enrollUser(orgId: Uuid!): OrganizationDto!
  login(email: String!, oidcInteractionUid: String!, password: String!): LoginResponseDto!
  modifyOrganization(modifyOrgReqDto: ModifyOrganizationReqDto!): OrganizationDto!
  register(email: String!, firstName: String!, lastName: String!, oidcInteractionUid: String!, password: String!): RegisterResponseDto!
  user(firstName: String, lastName: String, newPassword: String, oldPassword: String): UserDto!
}

type OrganizationDto {
  createdAt: DateTime!
  desc: String!
  iName: String
  id: Uuid!
  location: String!
  name: String!
  ownerId: String!
  phone: String!
  totalAmount: Float
  type: OrganizationPostType!
  updatedAt: DateTime
  users: [UserDto]
}

enum OrganizationPostType {
  MASJID
  OTHER
}

type Query {
  allOrganization: [OrganizationDto!]!
  deleteOrganization(orgId: Uuid!): Boolean!
  myOrganizationList(listMembers: Boolean): [OrganizationDto!]!
  user: UserDto!
}

type RegisterResponseDto {
  auth: AuthResponseDto!
  user: UserDto!
}

type UserDto {
  email: String!
  firstName: String!
  id: Uuid!
  lastName: String!
  organizations: [OrganizationDto]
  status: UserStatus!
}

enum UserStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  UNVERIFIED
}

"""Uuid custom scalar type from cassandra"""
scalar Uuid
